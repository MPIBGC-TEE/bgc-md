The purpose of this Schema is to work backwards from the minimal requirement that the 
an Instance of a CompartmentalModel can be created.
So a model consists at minimum of a  constructor call.
and possibly some variable definitions to populate the namespace in which the constructor is called. 
The package also contains information how to avoid the direct constructor call. This knowledge is represented in two sets.
A set of variables called MVars and a set of functions called Computers.
The sets form the nodes and edges of a directed graph, which can be used to 
determine if a certain Mvar can be computed from the Mvars defined (or instanciated) in the model descritpion  by the users and the (growing) set of computers represented by the bgc-md packages. 

to do:
- At the moment the tests can not be run in one suite (we have to find the reason)a, since the source of the problem most likely lies in the (prototypically implemented) way the package handles more than one model and could affect model comparisons.

- With a growing set of computers it is possible that some of the MVars explicitly defined by a user in a specific model could be computed from a subset.
 This introduces an indirect form of duplication, which should be detected automatically and flagged (so that the model descriptions can be pruned to a minimal set)  Even more indirectly some results may be computable in different ways from the intanciated MVars (some MVars have several edges pointing to them)
 Contradictions should be checked for.

 - Library vs. Framework 
  CompartmentalSystems and LAPM can be considered libraries that can be called
  in different parallelisation scenarios and with different data.
  bgc-md has both library and framework characteristics.
  The (types) of MVars and computers connecting them represents a domain knowledge in form of a library. 
  The collection of different models enforces some rules on the way a single model has to formulated in order to be comparable to other models. In this sense it comprises a framework in which different models can be plugged.
 (Sympolical) Models and data can be seen as orthogonal to each other but are also connected ( for a model wiht more pools and connections we will need more data...)
 How much(links to the) data should be part of the database?


